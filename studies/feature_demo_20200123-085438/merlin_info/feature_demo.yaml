description:
  name: feature_demo
  description: Run 10 hello worlds.

batch:
  type: local
  dry_run: false
  shell: /bin/bash

env:
  variables:
    OUTPUT_PATH: ./studies
    N_SAMPLES: 10
    WORKER_NAME: demo_worker
    VERIFY_QUEUE: default_verify_queue
    SCRIPTS: /Users/mubarka1/march-tutorial/feature_demo/scripts
    HELLO: /Users/mubarka1/march-tutorial/feature_demo/scripts/hello_world.py
    FEATURES: /Users/mubarka1/march-tutorial/feature_demo/scripts/features.json
    TRANSLATE: /Users/mubarka1/march-tutorial/feature_demo/scripts/translator.py
    COLLECT: /Users/mubarka1/march-tutorial/feature_demo/scripts/collector.py
    MAKE_SAMPLES: /Users/mubarka1/march-tutorial/feature_demo/scripts/make_samples.py
    LEARN: /Users/mubarka1/march-tutorial/feature_demo/scripts/learn.py
    PREDICT: /Users/mubarka1/march-tutorial/feature_demo/scripts/predict.py

study:
- name: hello
  description: 'process a sample with hello world

    '
  run:
    cmd: 'python /Users/mubarka1/march-tutorial/feature_demo/scripts/hello_world.py -outfile hello_world_output_$(MERLIN_SAMPLE_ID).json $(X0)
      $(X1) $(X2)

      '
    task_queue: hello_queue
    max_retries: 1
    shell: /bin/bash
- name: collect
  description: 'process the output of the hello world samples, extracting specific
    features;

    '
  run:
    cmd: 'echo $(MERLIN_GLOB_PATH)

      echo $(hello.workspace)

      ls $(hello.workspace)/X2.$(X2)/$(MERLIN_GLOB_PATH)/hello_world_output_*.json
      > files_to_collect.txt

      python /Users/mubarka1/march-tutorial/feature_demo/scripts/collector.py -outfile results.json -instring "$(cat files_to_collect.txt)"

      '
    depends:
    - hello_*
    task_queue: collect_queue
    shell: /bin/bash
    max_retries: 30
- name: translate
  description: 'process the output of the hello world samples some more

    '
  run:
    cmd: python /Users/mubarka1/march-tutorial/feature_demo/scripts/translator.py -input $(collect.workspace)/results.json -output results.npz
      -schema /Users/mubarka1/march-tutorial/feature_demo/scripts/features.json
    depends:
    - collect
    task_queue: translate_queue
    shell: /bin/bash
    max_retries: 30
- name: learn
  description: 'train a learner on the results

    '
  run:
    cmd: python /Users/mubarka1/march-tutorial/feature_demo/scripts/learn.py -infile $(translate.workspace)/results.npz
    depends:
    - translate
    task_queue: learn_queue
    shell: /bin/bash
    max_retries: 30
- name: make_new_samples
  description: 'make a grid of new samples to pass to the predictor

    '
  run:
    cmd: python /Users/mubarka1/march-tutorial/feature_demo/scripts/make_samples.py -n $(N_NEW) -sample_type grid -outfile grid_$(N_NEW).npy
    task_queue: make_samples_queue
    shell: /bin/bash
    max_retries: 30
- name: predict
  description: 'make a new prediction from new samples

    '
  run:
    cmd: python /Users/mubarka1/march-tutorial/feature_demo/scripts/predict.py -infile $(make_new_samples.workspace)/grid_$(N_NEW).npy
      -outfile prediction_$(N_NEW).npy -reg $(learn.workspace)/random_forest_reg.pkl
    depends:
    - learn
    - make_new_samples
    task_queue: predict_queue
    shell: /bin/bash
    max_retries: 30
- name: verify
  description: 'if learn and predict succeeded, output a dir to signal study completion

    '
  run:
    cmd: "if [[ -f $(learn.workspace)/random_forest_reg.pkl && -f $(predict.workspace)/prediction_$(N_NEW).npy\
      \ ]]\nthen\n    touch FINISHED\n    exit 0\nelse\n    exit 101\n\
      fi\n"
    depends:
    - learn
    - predict
    task_queue: default_verify_queue
    shell: /bin/bash
    max_retries: 30
- name: python3_hello
  description: 'do something in python

    '
  run:
    cmd: 'print("OMG is this in python?")

      print("Variable X2 is $(X2)")

      '
    shell: /usr/bin/env python3
    task_queue: pyth3_q
    max_retries: 30
- name: python2_hello
  description: 'do something in python2, because change is bad

    '
  run:
    cmd: 'print "OMG is this in python2? Change is bad."

      print "Variable X2 is $(X2)"

      '
    shell: /usr/bin/env python2
    task_queue: pyth2_hello
    max_retries: 30
- name: stop_workers
  description: 'stop workers belonging to this workflow

    once all other tasks are finished.

    '
  run:
    cmd: merlin stop-workers --workers '.*demo_worker*'
    depends:
    - verify
    - python3_hello
    - python2_hello
    task_queue: stop_workers_queue
    shell: /bin/bash
    max_retries: 30

global.parameters:
  X2:
    values:
    - 0.5
    label: X2.%%
  N_NEW:
    values:
    - 10
    label: N_NEW.%%

merlin:
  resources:
    task_server: celery
    overlap: false
    workers:
      demo_worker:
        args: -l INFO --concurrency 3 --prefetch-multiplier 1 -Ofair
        steps:
        - all
        nodes:
        batch:
  samples:
    generate:
      cmd: python /Users/mubarka1/march-tutorial/feature_demo/scripts/make_samples.py -n 10 -outfile=/Users/mubarka1/march-tutorial/studies/feature_demo_20200123-085438/merlin_info/samples.npy
    file: /Users/mubarka1/march-tutorial/studies/feature_demo_20200123-085438/merlin_info/samples.npy
    column_labels:
    - X0
    - X1
    level_max_dirs: 25
